// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Billboard Billboard[]
  Category  Category[]
  Size      Size[]
  Color     Color[]
  Product   Product[]
  Order     Order[]
}

model Billboard {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Category Category[]

  store Store @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  storeId     String // Foreign Key to Store
  billboardId String // Foreign Key to Billboard
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Product Product[]

  store     Store     @relation(fields: [storeId], references: [id])
  billboard Billboard @relation(fields: [billboardId], references: [id])

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  name      String
  value     String
  storeId   String // Foreign Key to Store
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  store Store @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  name      String
  value     String
  storeId   String // Foreign Key to Store
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  store Store @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  url       String[] // URL of the image
  productId String // Foreign Key to Product
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId])
}

model Product {
  id         String   @id @default(uuid())
  name       String
  price      String
  storeId    String // Foreign Key to Store
  sizeId     String // Foreign Key to Size
  colorId    String // Foreign Key to Color
  categoryId String // Foreign Key to Category
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Image     Image?
  OrderItem OrderItem[]

  store    Store    @relation(fields: [storeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  size     Size     @relation(fields: [sizeId], references: [id])
  color    Color    @relation(fields: [colorId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  storeId   String // Foreign Key to Store
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItem OrderItem[]

  store Store @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String @id @default(uuid())
  orderId   String // Foreign Key to Order
  productId String // Foreign Key to Product

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
